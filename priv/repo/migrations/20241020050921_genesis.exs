defmodule Sonet.Repo.Migrations.Genesis do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
      add :username, :text, null: false
      add :bio, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:user, [:email], name: "user_unique_email_index")

    create unique_index(:user, [:username], name: "user_unique_username_index")

    create table(:token, primary_key: false) do
      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :jti, :text, null: false, primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end
  end

  def down do
    drop table(:token)

    drop_if_exists unique_index(:user, [:username], name: "user_unique_username_index")

    drop_if_exists unique_index(:user, [:email], name: "user_unique_email_index")

    drop table(:user)
  end
end
