defmodule Sonet.Repo.Migrations.Genesis do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:token, primary_key: false) do
      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :jti, :text, null: false, primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:article, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :title, :text, null: false
      add :description, :text
      add :body, :text
      add :slug, :citext, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :author_id, :uuid, null: false
      add :archived_at, :utc_datetime_usec
    end

    create table(:account_clip, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id, :uuid, null: false
      add :target_id, :uuid, null: false
      add :archived_at, :utc_datetime_usec
    end

    create table(:account, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:article) do
      modify :author_id,
             references(:account,
               column: :id,
               name: "article_author_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:article, [:slug], name: "article_unique_slug_index")

    alter table(:account_clip) do
      modify :owner_id,
             references(:account,
               column: :id,
               name: "account_clip_owner_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :target_id,
             references(:account,
               column: :id,
               name: "account_clip_target_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:account_clip, [:owner_id, :target_id],
             name: "account_clip_unique_owner_target_index"
           )

    alter table(:account) do
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
      add :username, :text, null: false
      add :bio, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create unique_index(:account, [:email], name: "account_unique_email_index")

    create unique_index(:account, [:username], name: "account_unique_username_index")
  end

  def down do
    drop_if_exists unique_index(:account, [:username], name: "account_unique_username_index")

    drop_if_exists unique_index(:account, [:email], name: "account_unique_email_index")

    alter table(:account) do
      remove :archived_at
      remove :updated_at
      remove :inserted_at
      remove :bio
      remove :username
      remove :hashed_password
      remove :email
    end

    drop_if_exists unique_index(:account_clip, [:owner_id, :target_id],
                     name: "account_clip_unique_owner_target_index"
                   )

    drop constraint(:account_clip, "account_clip_owner_id_fkey")

    drop constraint(:account_clip, "account_clip_target_id_fkey")

    alter table(:account_clip) do
      modify :target_id, :uuid
      modify :owner_id, :uuid
    end

    drop_if_exists unique_index(:article, [:slug], name: "article_unique_slug_index")

    drop constraint(:article, "article_author_id_fkey")

    alter table(:article) do
      modify :author_id, :uuid
    end

    drop table(:account)

    drop table(:account_clip)

    drop table(:article)

    drop table(:token)
  end
end
